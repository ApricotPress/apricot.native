name: Build

on:
  push:

permissions:
  contents: write

jobs:
  build:
    name: ${{ matrix.os }} - Build native deps
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-24.04, macos-14, windows-2022 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Linux deps
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake ninja-build pkg-config \
            libx11-dev libxext-dev libxrandr-dev libxrender-dev \
            libxfixes-dev libxcursor-dev libxi-dev libxinerama-dev \
            libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev \
            libudev-dev libpulse-dev libpipewire-0.3-dev \
            libwayland-dev wayland-protocols libxkbcommon-dev \
            libasound2-dev libdbus-1-dev libibus-1.0-dev

      - name: macOS deps
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          brew update
          brew install cmake || true

      - name: Windows deps
        if: startsWith(matrix.os, 'windows')
        shell: pwsh
        run: |
          choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install -y ninja

      - name: Restore .NET tools
        shell: bash
        run: dotnet tool restore

      - name: Restore cached Builds
        id: cache-builds-restore
        uses: actions/cache/restore@v4
        with:
          path: Builds
          key: ${{ matrix.os }}-builds

      - name: Cake run
        run: |
          dotnet --info
          dotnet run
          
      - name: Save Primes
        id: cache-builds-save
        uses: actions/cache/save@v4
        with:
          path: Builds
          key: ${{ steps.cache-builds-restore.outputs.cache-primary-key }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: Artifacts/**
          if-no-files-found: error
          retention-days: 7
  
  merge_artifacts:
    name: Merge and push artifacts
    runs-on: ubuntu-24.04
    needs: build
    if: github.actor != 'github-actions[bot]'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: _all_artifacts

      - name: Merge into repo Artifacts/
        shell: bash
        run: |
          set -euo pipefail
          rm -rf Artifacts
          mkdir -p Artifacts
          shopt -s nullglob dotglob
          for d in _all_artifacts/*; do
            # Each downloaded artifact is a directory named after the matrix.os
            name="$(basename "$d")"
            mkdir -p "Artifacts/$name"
            cp -R "$d"/* "Artifacts/$name" || true
          done

      - name: Commit and push
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions@users.noreply.github.com"
          git add Artifacts
          if git diff --cached --quiet; then
            echo "No artifact changes to commit."
          else
            git commit -m "CI: merge artifacts from matrix [skip ci]"
            git push
          fi
